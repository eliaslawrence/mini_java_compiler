package userinterface;

import java.awt.Color;
import java.awt.Component;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.PrintStream;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import syntax.SyntaxAnalyzer;
import parsertree.GraphAST;
import syntax.SyntaxAnalyzerMethodsCaller;

/**
 *
 * @author Elias e Carlos Bruno
 */
public class UserInterface extends javax.swing.JFrame {

    /**
     * Cria interface principal
     */
    private String newDirectory = "";
    private String newName = "";
    private int lineError = -1;

    public UserInterface() {
        initComponents();

        //Centraliza celulas da tabela de numero da linha e pinta a linha caso haja erro            
        numLines.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table,
                    Object value, boolean isSelected, boolean hasFocus, int row, int col) {
                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, col);
                if (row == lineError) {
                    setBackground(new Color(250, 127, 127));
                } else {
                    setBackground(Color.WHITE);
                }
                setHorizontalAlignment(JLabel.CENTER);
                return this;
            }
        }
        );
        //A barra da area de texto controla a tabela com o numero de linhas               
        jScrollPane4.getVerticalScrollBar().setModel(jScrollPane5.getVerticalScrollBar().getModel());
        //Esconde a barra da tabela do numero de linhas 
        jScrollPane5.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        
        this.setLocationRelativeTo(null);
        this.setTitle("Compiler");
        jtxtArea.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jtxtArea = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        numLines = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        output = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        bNewFile = new javax.swing.JMenuItem();
        bOpenFile = new javax.swing.JMenuItem();
        bSaveFile = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        bCompile = new javax.swing.JMenuItem();
        bSeeTokens = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        bAST = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("APEMiniJavaâ„¢ Compiler");

        jLabel2.setText("Terminal:");

        jtxtArea.setColumns(20);
        jtxtArea.setRows(5);
        jtxtArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtAreaKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtxtAreaKeyReleased(evt);
            }
        });
        jScrollPane4.setViewportView(jtxtArea);

        numLines.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1"}
            },
            new String [] {
                "Line"
            }
        ));
        numLines.setEnabled(false);
        jScrollPane5.setViewportView(numLines);
        numLines.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        numLines.getAccessibleContext().setAccessibleParent(jScrollPane4);

        output.setColumns(20);
        output.setForeground(new java.awt.Color(204, 0, 0));
        output.setRows(5);
        output.setEnabled(false);
        jScrollPane2.setViewportView(output);

        jMenu1.setText("File");

        bNewFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        bNewFile.setText("New");
        bNewFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNewFileActionPerformed(evt);
            }
        });
        jMenu1.add(bNewFile);

        bOpenFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        bOpenFile.setText("Open");
        bOpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bOpenFileActionPerformed(evt);
            }
        });
        jMenu1.add(bOpenFile);

        bSaveFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        bSaveFile.setText("Save");
        bSaveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSaveFileActionPerformed(evt);
            }
        });
        jMenu1.add(bSaveFile);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Run");

        bCompile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F9, 0));
        bCompile.setText("Compile");
        bCompile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCompileActionPerformed(evt);
            }
        });
        jMenu2.add(bCompile);

        bSeeTokens.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        bSeeTokens.setText("See tokens");
        bSeeTokens.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSeeTokensActionPerformed(evt);
            }
        });
        jMenu2.add(bSeeTokens);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Tree");

        bAST.setText("AST");
        bAST.setEnabled(false);
        bAST.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bASTActionPerformed(evt);
            }
        });
        jMenu3.add(bAST);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 712, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bNewFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNewFileActionPerformed
           
        //Cria o dialog ao clicar em 'NEW FILE' para criar novo arquivo
        NewFile nv = new NewFile(this, true, this);
        nv.show();
    }//GEN-LAST:event_bNewFileActionPerformed

    public boolean Save() {
        //Salva arquivo
        FileOutputStream out;
        PrintStream p;

        try {
            out = new FileOutputStream(newDirectory);
            p = new PrintStream(out);
            p.println(this.jtxtArea.getText());
            p.close();
            this.setTitle(this.getTitle().replace("*", ""));
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    private void bSaveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSaveFileActionPerformed
       
        if (Save()) {
            JOptionPane.showMessageDialog(this, "Successfully saved");
        } else {
            JOptionPane.showMessageDialog(this, "Cannot save the file");
        }
    }//GEN-LAST:event_bSaveFileActionPerformed

    private void bCompileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCompileActionPerformed
        //Ao clicar em 'COMPILE', chama o metodo para compilar o codigo no textarea
        compile();
    }//GEN-LAST:event_bCompileActionPerformed

    public void countRows() {
        //Conta a quantidade de linhas no codigo e 
        //insere na tabela ao lado do textarea, 
        //representando o contador de linha
        int totalrows = jtxtArea.getLineCount();
        numLines.removeAll();
        for (int i = numLines.getRowCount() + 1; i <= totalrows; i++) {
            Object[] ob = new Object[1];
            ob[0] = i;
            ((DefaultTableModel) numLines.getModel()).addRow(ob);
        }
    }

    private void bOpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bOpenFileActionPerformed
        
        //Ao clicar em 'OPEN FILE', cria o dialog para abrir um arquivo existente
        OpenFile a = new OpenFile(this, true, this);
        a.setVisible(true);
    }//GEN-LAST:event_bOpenFileActionPerformed

    private void bASTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bASTActionPerformed
        compile();
        //Ao clicar em 'AST', chama o metodo que gera a arvore a partir do codigo
        SyntaxAnalyzerMethodsCaller.treeGenerator();   
        //Apresenta graficamente a arvore
        new GraphAST(this).setVisible(true);
    }//GEN-LAST:event_bASTActionPerformed

    private void bSeeTokensActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSeeTokensActionPerformed
        
        //Ao clicar em 'SEE TOKENS' apresenta a tabela com os tokens e seus respectivos tipos
        SeeTokens stk = new SeeTokens(this, true, newDirectory, this, jtxtArea.getText());
        stk.show();
    }//GEN-LAST:event_bSeeTokensActionPerformed

    private void jtxtAreaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtAreaKeyReleased
        
        //Se apertou a tecla de espaÃ§o, enter, delete... 
        //conta-se o numero de linhas novamente e compila-se tb
        if (evt.isControlDown() || evt.getKeyCode() == 10 || evt.getKeyCode() == 8 || evt.getKeyCode() == 127) {
            countRows();
            compile();
        }
    }//GEN-LAST:event_jtxtAreaKeyReleased

    private void jtxtAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtAreaKeyPressed
        // TODO add your handling code here:
        //Enquanto se digita, um * pisca no topo da pÃ¡gina
        if (!this.getTitle().contains("*")) {
            this.setTitle(this.getTitle() + "*");
        }
    }//GEN-LAST:event_jtxtAreaKeyPressed

    public void enableField(String newDirectory, String newName) {//New File
        //Libera a area de texto para poder escrever o codigo
        this.setTitle("Compiler");
        this.newName = newName;
        this.newDirectory = newDirectory + this.newName + ".txt";
        this.setTitle(this.getTitle() + " - " + this.newDirectory);
        jtxtArea.enable(true);
        jtxtArea.updateUI();
        countRows();
    }

    public void enableField(String newDir) {//Open File
        //Libera a area de texto para poder editar o codigo
        this.setTitle("Compiler");
        this.newDirectory = newDir;
        try {
            //Insere todo o texto do arquivo na area de texto
            FileInputStream fstream = new FileInputStream(newDirectory);
            DataInputStream in = new DataInputStream(fstream);
            this.jtxtArea.setText("");            
            while (in.available() != 0) {
                this.jtxtArea.setText(this.jtxtArea.getText() + in.readLine() + "\n");
            }
            in.close();
            this.setTitle(this.getTitle() + " - " + newDirectory);
            jtxtArea.enable(true);
            countRows();  
            
            //Seta o scroll para o topo
            javax.swing.SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    jScrollPane4.getVerticalScrollBar().setValue(0);
                }
            });
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "File input error");
        }
    }

    private void compile() {
        //Reseta todas variÃ¡veis:
        output.setText("");
        output.setEnabled(false);
        output.setEnabled(true);
        bAST.setEnabled(false);

        lineError = -1;
        numLines.setEnabled(true);
        numLines.setEnabled(false);
        SyntaxAnalyzer.errorLine = -1;
        SyntaxAnalyzer.message = "";
        SyntaxAnalyzer.alreadySet = false;
        //
        Save();
        //AnÃ¡lise lÃ©xica
        LexicalAnalyzer.lexicalError(jtxtArea.getText());
        //System.out.println("Linha: " + (AnalisadorSintatico.errorLine - 1));
        //Chama o mÃ©todo COMPILAR que executa o lexer e o parser        
        SyntaxAnalyzerMethodsCaller.compilar(newDirectory);
        //        
        output.setForeground(new Color(204, 0, 0));
        output.setText(SyntaxAnalyzer.message);
        output.setEnabled(true);

        lineError = SyntaxAnalyzer.errorLine - 1;
        numLines.setEnabled(true);
        numLines.setEnabled(false);
        
        //Se nao houve erro, informa que foi compilado com sucesso
        if (SyntaxAnalyzer.message.isEmpty()) {
            bAST.setEnabled(true);
            output.setForeground(new Color(0, 204, 0));
            output.setText("Succesfully compiled!");
            output.setEnabled(true);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem bAST;
    private javax.swing.JMenuItem bCompile;
    private javax.swing.JMenuItem bNewFile;
    private javax.swing.JMenuItem bOpenFile;
    private javax.swing.JMenuItem bSaveFile;
    private javax.swing.JMenuItem bSeeTokens;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea jtxtArea;
    private javax.swing.JTable numLines;
    private javax.swing.JTextArea output;
    // End of variables declaration//GEN-END:variables

}
